{"name": "test_by_product_3", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: crashed.\n  (chrome not reachable)\n  (The process started from chrome location /Applications/Google Chrome.app/Contents/MacOS/Google Chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n0   chromedriver                        0x000000010301da90 chromedriver + 3889808\n1   chromedriver                        0x0000000102facb54 chromedriver + 3427156\n2   chromedriver                        0x0000000102c9e238 chromedriver + 221752\n3   chromedriver                        0x0000000102cbef6c chromedriver + 356204\n4   chromedriver                        0x0000000102cbb34c chromedriver + 340812\n5   chromedriver                        0x0000000102ceca40 chromedriver + 543296\n6   chromedriver                        0x0000000102cc454c chromedriver + 378188\n7   chromedriver                        0x0000000102ff12f8 chromedriver + 3707640\n8   chromedriver                        0x0000000102ff4ea8 chromedriver + 3722920\n9   chromedriver                        0x0000000102ffb3d8 chromedriver + 3748824\n10  chromedriver                        0x0000000102ff59a8 chromedriver + 3725736\n11  chromedriver                        0x0000000102fd0de8 chromedriver + 3575272\n12  chromedriver                        0x000000010300fd1c chromedriver + 3833116\n13  chromedriver                        0x000000010300fe84 chromedriver + 3833476\n14  chromedriver                        0x0000000103024210 chromedriver + 3916304\n15  libsystem_pthread.dylib             0x00000001a8de54ec _pthread_start + 148\n16  libsystem_pthread.dylib             0x00000001a8de02d0 thread_start + 8", "trace": "set_up = None, set_group = None\n\n    def test_by_product_3(set_up,set_group):\n>       driver = webdriver.Chrome(executable_path='/Users/user/Desktop/resourse/chromedriver')\n\ntests/test_by_product.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/chrome/webdriver.py:69: in __init__\n    super().__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/chromium/webdriver.py:92: in __init__\n    super().__init__(\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:270: in __init__\n    self.start_session(capabilities, browser_profile)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:363: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:428: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fbcf81c3220>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: Chrome failed to start: crashed....0001a8de54ec _pthread_start + 148\\\\n16  libsystem_pthread.dylib             0x00000001a8de02d0 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: crashed.\nE         (chrome not reachable)\nE         (The process started from chrome location /Applications/Google Chrome.app/Contents/MacOS/Google Chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010301da90 chromedriver + 3889808\nE       1   chromedriver                        0x0000000102facb54 chromedriver + 3427156\nE       2   chromedriver                        0x0000000102c9e238 chromedriver + 221752\nE       3   chromedriver                        0x0000000102cbef6c chromedriver + 356204\nE       4   chromedriver                        0x0000000102cbb34c chromedriver + 340812\nE       5   chromedriver                        0x0000000102ceca40 chromedriver + 543296\nE       6   chromedriver                        0x0000000102cc454c chromedriver + 378188\nE       7   chromedriver                        0x0000000102ff12f8 chromedriver + 3707640\nE       8   chromedriver                        0x0000000102ff4ea8 chromedriver + 3722920\nE       9   chromedriver                        0x0000000102ffb3d8 chromedriver + 3748824\nE       10  chromedriver                        0x0000000102ff59a8 chromedriver + 3725736\nE       11  chromedriver                        0x0000000102fd0de8 chromedriver + 3575272\nE       12  chromedriver                        0x000000010300fd1c chromedriver + 3833116\nE       13  chromedriver                        0x000000010300fe84 chromedriver + 3833476\nE       14  chromedriver                        0x0000000103024210 chromedriver + 3916304\nE       15  libsystem_pthread.dylib             0x00000001a8de54ec _pthread_start + 148\nE       16  libsystem_pthread.dylib             0x00000001a8de02d0 thread_start + 8\n\n/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:243: WebDriverException"}, "attachments": [{"name": "stdout", "source": "f73a3fee-0607-476f-9f29-49d56840fde9-attachment.txt", "type": "text/plain"}], "start": 1664283428167, "stop": 1664283430135, "uuid": "e6ec7319-749d-4bdd-b56c-550a63243ca9", "historyId": "53006ef06fa9a2ea3eb809546034b64a", "testCaseId": "697401dbc0cca8181548c5cfef6c0022", "fullName": "tests.test_by_product#test_by_product_3", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_by_product"}, {"name": "host", "value": "MacBook-Air-M1.Dlink"}, {"name": "thread", "value": "52892-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_by_product"}]}